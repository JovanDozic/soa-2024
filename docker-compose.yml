version: "3.9"

# docker compose up --build

services:
  # # # # # [microservices]

  # # # # [ms-tours]

  ms-tours:
    build:
      dockerfile: Dockerfile
      context: ./ms-back-end/ms-tours
    image: microservice-tours:improve7
    container_name: ms-tours-container
    restart: always
    networks:
      - servers
    ports:
      - "8081:8081"
    depends_on:
      - ms-tours-database

  ms-tours-database:
    image: postgres:13
    restart: always
    networks:
      - servers
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: ms-tours
      PGSEARCHPATH: tours
    volumes:
      - ms-tours-database-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # # # # [ms-blogs]

  ms-blogs:
    build:
      dockerfile: Dockerfile
      context: ./ms-back-end/ms-blogs
    image: microservice-blogs:improve7
    container_name: ms-blogs-container
    restart: always
    networks:
      - servers
    ports:
      - "8080:8080"
    depends_on:
      - ms-blogs-database

  ms-blogs-database:
    image: postgres:13
    restart: always
    networks:
      - servers
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: ms-blogs
      PGSEARCHPATH: blogs
    volumes:
      - ms-blogs-database-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  # # # # [ms-followers]

  ms-followers:
    build:
      dockerfile: Dockerfile
      context: ./ms-back-end/ms-followers
    image: microservice-followers:improve7
    container_name: ms-followers-container
    hostname: "user-server"
    restart: always
    networks:
      - servers
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=adminadmin
    depends_on:
      neo4j:
        condition: service_healthy

  # NoSQL: Neo4J DB
  neo4j:
    image: neo4j
    restart: always
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p adminadmin || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/adminadmin
    volumes:
      - neo4j_data:/data

  # # # # [ms-stakeholders]

  stakeholders-service:
    image: stakeholders-service
    container_name: stakeholders-service
    hostname: stakeholders-service
    build:
      context: ./ms-back-end/ms-stakeholders/
      dockerfile: Dockerfile
    restart: always
    environment:
      STAKEHOLDER_SERVICE_ADDRESS: 8084
    networks:
      - servers
    depends_on:
      - ms-stakeholders-database

  ms-stakeholders-database:
    image: postgres:13
    restart: always
    networks:
      - servers
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: ms-stakeholders
      PGSEARCHPATH: stakeholders
    volumes:
      - ms-stakeholders-database-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"

  api_gateway1:
    image: api_gateway1
    container_name: api_gateway1
    hostname: api_gateway1
    build:
      context: ./ms-back-end/api-gateway/
      dockerfile: Dockerfile
    restart: always
    environment:
      STAKEHOLDER_SERVICE_ADDRESS: stakeholders-service:8084
      GATEWAY_ADDRESS: 8084
    depends_on:
      - stakeholders-service
    networks:
      - servers
    ports:
      - "8084:8084"

  # # # # # [monolith]

  ms-monolith:
    build:
      dockerfile: Dockerfile
      context: ./monolit-back-end
    image: monolith-back-end:latest
    container_name: ms-monolith-container
    restart: always
    networks:
      - servers
    ports:
      - "8082:8082"
    depends_on:
      - monolith-database

  monolith-database:
    image: postgres:13
    restart: always
    networks:
      - servers
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: Explorer-v1
      PGSEARCHPATH: monolith
    volumes:
      - ms-monolith-database-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

volumes:
  ms-tours-database-data:
    name: ms-tours-database-data

  ms-blogs-database-data:
    name: ms-blogs-database-data

  ms-followers-database-data:
    name: ms-followers-database-data

  ms-stakeholders-database-data:
    name: ms-stakeholders-database-data

  ms-monolith-database-data:
    name: ms-monolith-database-data

  neo4j_data:

networks:
  servers:
    name: servers
    driver: bridge
